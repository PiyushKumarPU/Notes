@startuml
title Decorator Design Pattern - Offer Application (FinTech Example)

interface PaymentProcessor {
    + processPayment(amount : double) : void
}

class BasicPaymentProcessor implements PaymentProcessor {
    + processPayment(amount : double) : void
}

abstract class OfferDecorator implements PaymentProcessor {
    # wrappedProcessor : PaymentProcessor
    + OfferDecorator(processor : PaymentProcessor)
    + processPayment(amount : double) : void
}

class FestivalOfferDecorator extends OfferDecorator {
    + processPayment(amount : double) : void
}

class CashbackOfferDecorator extends OfferDecorator {
    + processPayment(amount : double) : void
}

class OfferApplicationDemo {
    + main(args : String[]) : void
}

PaymentProcessor <|.. BasicPaymentProcessor
PaymentProcessor <|.. OfferDecorator
OfferDecorator <|-- FestivalOfferDecorator
OfferDecorator <|-- CashbackOfferDecorator
OfferDecorator --> PaymentProcessor
OfferApplicationDemo --> PaymentProcessor

note right of OfferDecorator
Abstract Decorator:
Holds reference to wrapped PaymentProcessor
and delegates calls to it.
end note

note bottom of FestivalOfferDecorator
Applies 10% discount on payment amount
end note

note bottom of CashbackOfferDecorator
Adds 5% cashback after processing payment
end note

@enduml
